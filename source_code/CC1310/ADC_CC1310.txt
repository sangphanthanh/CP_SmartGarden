
/*
 *  ======== empty.c ========
 */
/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>

/* TI-RTOS Header files */

#include <ti/drivers/PIN.h>
#include <ti/drivers/pin/PINCC26XX.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/drivers/UART.h>
// #include <ti/drivers/I2C.h>
#include <ti/drivers/PIN.h>
// #include <ti/drivers/SPI.h>
// #include <ti/drivers/UART.h>
// #include <ti/drivers/Watchdog.h>
#include  "driverlib/aux_wuc.h"
#include "inc/hw_aux_evctl.h"
#include "driverlib/aux_adc.h"

#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
/* Board Header files */
#include "Board.h"

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/family/arm/m3/Hwi.h>


#include <xdc/std.h>
#include <xdc/runtime/System.h>

#define TASKSTACKSIZE   512
#define TASK_PRI        1
Task_Struct task0Struct;
Char task0Stack[TASKSTACKSIZE];
uint16_t singleSample;

void taskFxn(UArg a0, UArg a1){

	//Enable Clock AUX
	AUXWUCClockEnable(AUX_WUC_MODCLKEN0_ANAIF_M|AUX_WUC_MODCLKEN0_AUX_ADI4_M);
	//Configuration AUX_ADC
	AUXADCEnableSync(AUXADC_REF_FIXED, AUXADC_SAMPLE_TIME_1P37_MS, AUXADC_TRIGGER_MANUAL);
	//Congiguration Input Pin DIO23
	AUXADCSelectInput(ADC_COMPB_IN_AUXIO7);
	//trigger and get value from AUX_ADC
	AUXADCGenManualTrigger();
	singleSample = AUXADCReadFifo();
	//AUX_ADC disable
	AUXADCDisable();
	System_printf("Value: %d \t \n",singleSample);
	System_flush();
}
/*
 *  ======== main ========
 */


int main(void)
{
	Task_Params taskParams;

	   // Call board init functions
	    Board_initGeneral();
	    // Board_initI2C();
	    // Board_initSPI();
	    // Board_initUART();
	    // Board_initWatchdog();

	   //  Construct heartBeat Task  thread
	    Task_Params_init(&taskParams);
	    taskParams.arg0 = 1000;
	    taskParams.stackSize = TASKSTACKSIZE;
	    taskParams.stack = &task0Stack;
	    taskParams.instance->name = "taskFxn";
	    System_printf("Task Init Ok \n");
	    Task_construct(&task0Struct, (Task_FuncPtr)taskFxn, &taskParams, NULL);
	    System_flush();

	    /* Start BIOS */
	    BIOS_start();

	    return (0);
}
