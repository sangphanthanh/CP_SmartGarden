/*
 * Copyright (c) 2015-2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.c ========
 */
/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>

/* TI-RTOS Header files */
#include <ti/drivers/I2C.h>
#include <ti/drivers/i2c/I2CCC26XX.h>
#include <ti/drivers/PIN.h>
#include <ti/sysbios/knl/Clock.h>

// #include <ti/drivers/SPI.h>
// #include <ti/drivers/UART.h>
// #include <ti/drivers/Watchdog.h>

/* Board Header files */
#include "Board.h"
#include "driverlib/i2c.h"
#include <ti/drivers/UART.h>
#include <stdint.h>

#define TASKSTACKSIZE   512
//#define Board_I2C 0



Task_Struct task0Struct, task1Struct;
Char task0Stack[TASKSTACKSIZE], task1Stack[TASKSTACKSIZE];

/*
 * Application LED pin configuration table:
 *   - All LEDs board LEDs are off.
 */
PIN_Config ledPinTable[] = {
    Board_LED0 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    Board_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
	Board_I2C0_SDA0 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
	Board_I2C0_SCL0 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};


uint16_t getLightSensor(UArg arg0, UArg arg1) {
	uint8_t lux1;
	uint8_t lux2;
	uint16_t lux;
	uint8_t txBuffer[2];
	uint8_t rxBuffer[8];
	I2C_Handle i2c;
	I2C_Params i2cParams;
	I2C_Transaction i2cTransaction;

	//Create I2C for usage
	I2C_Params_init(&i2cParams);
	i2cParams.bitRate = I2C_400kHz;
	i2c = I2C_open(CC1310_LAUNCHXL_I2C0, &i2cParams);
	if (i2c == NULL) {
		System_abort("Error Initializing I2C\n");
	} else {
		System_printf("I2C Initialized!\n");
	}

	Task_sleep(1000000 / Clock_tickPeriod);

	txBuffer[0] = 0x03;
	txBuffer[1] = 0x00;


	i2cTransaction.slaveAddress = 0x5c; //OPT3001 ADDR;
	i2cTransaction.writeBuf = txBuffer;
	i2cTransaction.writeCount = 2;
	i2cTransaction.readBuf = rxBuffer;
	i2cTransaction.readCount = 8;

	if (I2C_transfer(i2c, &i2cTransaction)) {

		//Extract degrees C from the received data
		lux1 = rxBuffer[2];

		lux2 = rxBuffer[3];

		lux = ((lux1 << 8) | lux2) / 1.2;
		System_printf("Lux: %d \t \n", lux);

	} else {
		System_printf("I2C Bus fault\n");
	}

	//Deinitialized I2C
	I2C_close(i2c);
	System_printf("I2C closed!\n");

	System_flush();
	return lux;
}



/*
 *  ======== main ========
 */
int main(void) {
	while (1) {
		Task_Params taskParams;

		// Call board init functions
		Board_initGeneral();

		/* Construct writer/reader Task threads */
		Task_Params_init(&taskParams);
		taskParams.arg0 = 1000;
		taskParams.stackSize = TASKSTACKSIZE;
		taskParams.stack = &task0Stack;
		taskParams.instance->name = "getLightSensor";
		taskParams.priority = 1;
		Task_construct(&task0Struct, (Task_FuncPtr) getLightSensor, &taskParams,
				NULL);

		/*       taskParams.arg0 = 1000;
		 taskParams.stackSize = TASKSTACKSIZE;
		 taskParams.stack = &task1Stack;
		 taskParams.instance->name = "getTempHumi";
		 taskParams.priority = 1;
		 Task_construct(&task1Struct, (Task_FuncPtr)getTempHumi, &taskParams, NULL);*/

		System_flush();

		//Start BIOS
		BIOS_start();
	}
	return 0;
}
